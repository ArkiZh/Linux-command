
Bourne shell 的内部命令
##############################

Bourne Shell 是 UNIX 的初始外壳程序之一，它是20世纪70年代中期由 Stephen R. Bourne 在贝尔实验室编写的。下面介绍 Bourne shell 的内部命令，它们严格遵循 POSIX 规范。

\:（冒号）
*******************************

.. highlight:: none

::

    : [arguments]


通常情况下它只是一个占位符，返回状态是零。在 Linux 的帮助页中说它除了参数扩展和重定向之外不产生任何作用。

.（点号）
*******************************

::

    . filename [arguments]


在当前的 shell 环境中，读取并执行 filename 中的命令。``.`` 命令和 Bash 的内部命令 source 是等价的。

source 命令与 shell scripts 的区别是，source 在当前 shell 环境下执行命令，而 shell scripts 是启动一个子 shell 来执行命令。如果把设置环境变量（或 alias 等）的命令写进 scripts 中，那么它只会影响子 shell,无法改变当前的 shell，所以 source(或点)命令经常用来执行刚修改的初始化文档。

break
*******************************

::

    break [n]


跳出所有循环，从 for、while、until 或 select 循环中跳出。如果指定 n（n ≥ 1），则跳出外围的第 n 层循环。

cd
*******************************

::

    cd [-L|[-P [-e]] [-@] [directory]


切换工作目录至 directory（directory 可以使用绝对路径或相对路径）。如果没有指定 directory，则使用 shell 变量 ``$HOME`` 的值。

==========    ==============
命令             说明
==========    ==============
cd              进入用户主目录
cd ~            进入用户主目录
cd ~xiao        进入用户 xiao 的主目录（需要权限）
cd -            返回上一个目录
==========    ==============

continue
*******************************

::

    continue [n]


跳出当前循环，继续执行外围的 for，while，until 或 select 的循环。如果指定 n（n ≥ 1），则继续执行外围第 n 层的循环。

eval
*******************************

::

    eval [arguments]


eval会对后面的 arguments 扫描两遍。第一遍扫描后，如果 arguments 是普通命令，则执行此命令；如果 arguments 中包含间接引用的变量，则该命令会对变量进行第两遍扫描。

exec
*******************************

::

    exec [-cl] [-a name] [command [arguments]]


用于调用并执行指令的命令。如果在当前终端中使用命令，则当指定的命令执行完毕后会立即退出终端。

exit
*******************************

::

    exit [n]


退出 shell，并在 shell 的父进程中返回状态 n。执行 exit  可以指定 shell 的返回状态 n。若不设置状态参数，则以预设值退出。状态值0代表执行成功，其他值代表执行失败。

export
*******************************

::

    export [-fn] [-p] [name[=value]]


将 shell 变量输出为环境变量，或者将 shell 函数输出为环境变量。“-f”选项（助记词: Function， 函数）用于指定 shell 函数；否则，它是 shell 变量。如果名称后面是“=值”的形式，那么这个值就会赋给名称。

getopts
*******************************

::

    getopts optstring name [args]


Shell 脚本用 getopts 来分析位置参数。在执行脚本时，getopts 就检查命令行参数，并判断它是否合法。即检查参数是否以 - 开头，后面跟一个包含在 options 中的字母。如果是，就把匹配的选项字母存在指定的变量 variable 中，并返回退出状态0；如果 - 后面的字母没有包含在 options 中，就在 variable 中存入一个 ？，并返回退出状态0；如果命令行中已经没有参数，或者下一个参数不以 - 开头，就返回不为0的退出状态。

hash
*******************************

::

    hash [-r] [-p filename] [-dt] [name]


linux 系统下有一个 hash 表（就相当于命令缓存），当开机时这个 hash 表为空，每当你执行命令时，hash 表会记录这条命令的路径。第一次执行命令时，shell 会从默认的 PATH 路径下寻找该命令，当第二次使用该命令时，shell会先查看 hash 表，如果没有该命令才会去 PATH 路径下寻找。hash表的主要作用是提高命令的调用速率。

pwd
*******************************

::

    pwd [-LP]


打印出当前工作目录的绝对路径。如果给定了“-P”选项（助记词: Physical， 物理路径），则打印的路径中不会包含符号链接。如果给定了“-L”选项（助记词: symLink， 符号链接），则打印的路径中可能包含符号链接。

readonly
*******************************

::

    readonly [-aAf] [-p] [name[=value]] ...


用于定义只读 shell 变量和 shell 函数。readonly命令的选项-p可以输出显示系统中所有定义的只读变量。

return
*******************************

::

    return [n]


退出函数并返回指定的退出状态码 n。return 命令允许指定一个整数值 n 来定义函数的退出状态码。如果没有指定 n，则返回函数中最后一个执行命令的退出状态码。return 命令也可以用来结束执行一个用内部命令 . 或 source 执行的脚本。


shift
*******************************

::

    shift [n]


用于左移位置参数。比如 shift 3 会将 $4 左移 3 位变成 $1，如果原来的是 $1、$2 或 $3 则丢弃，$0不移动。不带参数的 shift 命令相当于 shift 1。

shift命令对于位置变量或命令行参数非常有用，它可以在不知道位置变量个数的情况下，逐个的把参数一一处理。


test 和 [ ]
*******************************

::

    test expr


用于检查某个条件是否成立，它可以进行数值、字符和文件三个方面的测试。test 不接受任何选项。在if then else语句中，也可以用[]代替，即 [ condition ]，注意：方括号两边都要用空格。

times
*******************************

::

    times command


获取命令执行时间，其中包括命令的实际运行时间（real time），以及执行此进程所消耗的实际CPU时间（user time）和内核执行系统调用所使用的时间（sys time）。

trap
*******************************

::

    trap [-lp] [arg] [sigspec ...]

用于在接收到指定信号后将要采取的命令，常见的用途是在脚本程序被中断时完成清理工作。

umask
*******************************

::

    umask [-p] [-S] [mode]

用来设置限制新建文件权限的掩码。当新文件被创建时，其最初的权限由文件创建掩码决定。用户每次登陆系统时，都会执行 umask 命令， 并自动设置掩码 mode 来限制新文件的权限。用户可以再次执行 umask 命令来改变默认值，新的权限将会把旧的覆盖掉。

unset
*******************************

::

    unset [-fnv] [name]

用于删除已定义的 shell 变量（包括环境变量）和 shell 函数。unset 命令不能够删除具有只读属性的 shell 变量和环境变量。
